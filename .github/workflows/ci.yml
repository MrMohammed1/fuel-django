name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11.1'

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.27.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
        docker-compose --version

    - name: Create .env file
      run: |
        echo "GRAPH_HOPPER_API_KEY=${{ secrets.GRAPH_HOPPER_API_KEY }}" > .env
        echo "OPENROUTE_API_KEY=${{ secrets.OPENROUTE_API_KEY }}" >> .env
        echo "HERE_API_KEY=${{ secrets.HERE_API_KEY }}" >> .env
        echo "OPENCAGE_API_KEY=${{ secrets.OPENCAGE_API_KEY }}" >> .env
        echo "REDIS_HOST=redis" >> .env
        echo "REDIS_PORT=6379" >> .env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "DEBUG=${{ secrets.DEBUG }}" >> .env
        echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
        echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
        echo "DATABASE_URL=postgresql://postgres:postgres@db:5432/fuel_django" >> .env

    - name: Create .env.docker file
      run: |
        cp .env.docker.example .env.docker
        echo "POSTGRES_PASSWORD=postgres" >> .env.docker

    - name: Verify .env.docker file
      run: |
        cat .env.docker

    - name: Install Python dependencies
      run: |
        docker run --rm -v $(pwd):/app -w /app python:3.11.1-slim pip install -r requirements.txt

    - name: Build and start containers
      run: |
        docker-compose up --build -d || (docker-compose logs && docker ps -a && exit 1)

    - name: Wait for containers to be ready
      run: |
        echo "Checking if container task2-db-1 exists..."
        if ! docker ps -a --filter "name=task2-db-1" --format '{{.Names}}' | grep -q "task2-db-1"; then
          echo "Error: Container task2-db-1 does not exist!"
          docker-compose logs db
          exit 1
        fi
        echo "Container task2-db-1 exists. Checking if PostgreSQL is ready..."
        for i in {1..60}; do
          if docker exec task2-db-1 pg_isready -U postgres; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Waiting for PostgreSQL to be ready... ($i/60)"
          sleep 1
        done
        if [ $i -eq 60 ]; then
          echo "Error: PostgreSQL did not become ready in time!"
          docker-compose logs db
          exit 1
        fi
        echo "Checking if container task2-redis-1 exists..."
        if ! docker ps -a --filter "name=task2-redis-1" --format '{{.Names}}' | grep -q "task2-redis-1"; then
          echo "Error: Container task2-redis-1 does not exist!"
          docker-compose logs redis
          exit 1
        fi
        echo "Container task2-redis-1 exists. Checking if Redis is ready..."
        for i in {1..60}; do
          if docker exec task2-redis-1 redis-cli ping | grep -q PONG; then
            echo "Redis is ready!"
            break
          fi
          echo "Waiting for Redis to be ready... ($i/60)"
          sleep 1
        done
        if [ $i -eq 60 ]; then
          echo "Error: Redis did not become ready in time!"
          docker-compose logs redis
          exit 1
        fi
        docker ps -a  # Check if containers are running

    - name: Copy custom pg_hba.conf to PostgreSQL container
      run: |
        docker cp pg_hba.conf task2-db-1:/var/lib/postgresql/data/pg_hba.conf
        docker restart task2-db-1
        sleep 10  # Wait for PostgreSQL to restart

    - name: Verify containers are running
      run: |
        docker ps -a

    - name: Verify PostgreSQL and Redis connections
      run: |
        docker exec task2-web-1 psql -h db -U postgres -d fuel_django -c "SELECT 1;" || (docker logs task2-db-1 && exit 1)
        docker exec task2-web-1 redis-cli -h redis -p 6379 ping || (docker logs task2-redis-1 && exit 1)

    - name: Run migrations
      run: |
        docker exec task2-web-1 python manage.py makemigrations api
        docker exec task2-web-1 python manage.py migrate

    - name: Load initial data
      run: |
        docker exec task2-web-1 python manage.py loaddata api/fixtures/initial_data.json

    - name: Check test files
      run: |
        docker exec task2-web-1 ls -la tests/

    - name: Run tests
      env:
        TESTING: 1
        DJANGO_TEST_PROCESS: 1
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        DEBUG: ${{ secrets.DEBUG }}
        ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
        OPENCAGE_API_KEY: ${{ secrets.OPENCAGE_API_KEY }}
      run: |
        docker exec task2-web-1 pytest tests/ -v --create-db || echo "Tests failed with exit code $?"

    - name: Check pytest cache directory
      if: always()
      run: |
        docker exec task2-web-1 ls -la .pytest_cache/ || echo "pytest cache directory not found"

    - name: Copy pytest cache to host
      if: always()
      run: |
        docker cp task2-web-1:/app/.pytest_cache ./ || echo "Failed to copy pytest cache"

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: .pytest_cache/

    - name: Stop containers
      if: always()
      run: |
        docker-compose down